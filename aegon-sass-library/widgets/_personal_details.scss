// 
// Reason to don't use id selectors instead of class selectors
// http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/
// http://screwlewse.com/2010/07/dont-use-id-selectors-in-css/
// http://oli.jp/2011/ids/

.personal_details_widget {
  ul.horizontal {
    //overwriting the default "none" setting, but this might be an obsolete approach anyway, so the "none" setting could be eliminated in general setup
    display: block;
  }
  button.edit.transparent {
    float: none;
    margin: 0;
    padding: 0;
  }
  li.value {
    @media screen and(min-width: $rc-m-min-width) and(max-width: $rc-l-max-width) {
      min-height: $elements_height;
      line-height: 100%;
    }
    span {
      &.content,
      &.help {
        display: inline-block;
        line-height: 150%;
      }
      &.content {
        width: 228px;
      }
      &.help {
        float: none;
        margin-left: 10px;
        padding: 0;
        @media screen and(max-width: $rc-s-max-width) {
          //display: none;
        }
        &:before {
          position: static;
          display: inline-block;
          line-height: $elements_height;
        }
      }
    }
  }
  li.label {
    min-height: 0;
    &:after {
      content: ":";
    }
  }
  label.left {
    float: left;
  }
  .edit {
    ul.error {
      display: block;
      height: 24px;
      min-height: 0;
      opacity: 0;
      [class*="span"] {
        min-height: 0;  //overwriting min-height from row-fluid
        line-height: 18px;  //overwriting line-height from *body
      }
      & > li {
        margin-left: 0;
        color: $red;
        font-size: $small;
      }
      &.visible {
        opacity: 1;
      }
    }
    li.label,
    label {
      font-family: $font_normal;
      &:after {
        content: "";
      }
    }
    li.label.required:after,
    label.checkbox.required span.label:after {
      margin-left: 5px;
      content: "*";
      color: $red;
    }
  }
  ul.horizontal.row-fluid {
    //trying to fix the height set by the grid of 50px; there might be a necessity to adapt the margin-bottom in responsiveness and hopefully this change can be adapted in the future over all widgets and / or implemented in grid.scss
    height: auto;
    margin-bottom: 20px;
    &.residential_address {
      margin-bottom: 40px;
    }

    &.mobile {
      .verified-status {
        width: 100%;
        line-height: 150%;
        display: block;
      }
    }
  }
  // fix responsive peculiarities
  .row-fluid [class*="span"] {
    display: inline;
    @media screen and(max-width: $rc-s-max-width) {
      min-height: 5px;
    }
  }
  .NL,
  .world {
    display: none;
    &.visible {
      display: block;
    }
  }
  .email-info {
    font-family: $font_normal;
  }
}
// Mobile.
@include breakpoint($brk-mobile) {
  .personal_details_widget {
    &.container_12 {
      h3 {
        color: #000;

        @include rem("font-size", 20);
      }
      .horizontal.row-fluid {
        .label.span3 {
          width: 85%;
        }
        .span1 {
          width: 15%;
        }
        .value.span8 {
          width: 100%;
        }
        &.mobile {
          .content {
            padding-right: 20px;
          }
          .content,
          .verified-status {
            display: inline-block;
            width: auto;
          }
        }
      }
    }
  }
}
