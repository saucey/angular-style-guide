// 
// Reason to don't use id selectors instead of class selectors
// http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/
// http://screwlewse.com/2010/07/dont-use-id-selectors-in-css/
// http://oli.jp/2011/ids/

.personal_details_widget {
  ul.horizontal { //overwriting the default "none" setting, but this might be an obsolete approach anyway, so the "none" setting could be eliminated in general setup
    display: block;
  }
  button.edit.transparent {
    float: none;
    margin: 0;
    padding: 0;
  }

  li.value {
    @media screen and(min-width: $rc-m-min-width) and(max-width: $rc-l-max-width) {
      line-height: 100%;
      min-height: $elements_height;
    }
    span {
      &.content, &.help {
        display: inline-block;
        line-height: 150%;
      }
      &.content {
        width: 228px;
      }
      &.help {
        float:none;
        margin-left: 10px;
        padding: 0;
        @media screen and(max-width: $rc-s-max-width) {
          display: none;
        }
        &:before {
          line-height: $elements_height;

          position: static;

          display: inline-block;
        }
      }
    }
  }
  li.label {
    min-height: 0;
    &:after {
      content: ":";
    }
  }
  label.left {
    float:left;
  }
  li.invalid {
    position: relative;
    input ~ .errorText, select ~ .errorText {
      position: absolute;
      top: auto;
      bottom: 100%;
    }
  }

  .edit {
    ul.error {
      display: block;
      opacity: 0;
      height: 24px;
      min-height: 0;
      [class*='span'] {
        min-height: 0;  //overwriting min-height from row-fluid
        line-height: 18px;  //overwriting line-height from *body
      }
      &> li {
        color: $red;
        font-size: $small;
        margin-left: 0;
      }
      &.visible {
        opacity: 1;
      }
    }
    li.label, label {
      font-family: $font_normal;
      &:after {
        content: "";
      }
    }
    li.label.required:after, label.checkbox.required span.label:after {
      margin-left: 5px;
      content: "*";
      color: $red;
    }
  }

  ul.horizontal.row-fluid {  //trying to fix the height set by the grid of 50px; there might be a necessity to adapt the margin-bottom in responsiveness and hopefully this change can be adapted in the future over all widgets and / or implemented in grid.scss
    height: auto;
    margin-bottom: 20px;
  }

  // fix responsive peculiarities
  .row-fluid [class*='span'] {
    display: inline;
    @media screen and(max-width: $rc-s-max-width) {
      min-height: 5px;
    }
  }

  .NL, .world {
    display: none;
    &.visible {
      display: block;
    }
  }

  .residential_address {
    bottom-margin: 40px;
  }

  .email-info {
    font-family: $font_normal;
  }
}
// mobile
@include breakpoint($brk-mobile) {
  .personal_details_widget {
    &.container_12 {
      .horizontal.row-fluid {
        li {
          input.invalid.blurred {
            margin-top: 10px;
            ~ .errorText {
              top: -63px;
            }
          }
        }
        .label.span3 {
          width: 85%;
        }

        .span1 {
          width: 15%;
        }

        .value.span8 {
          width: 100%;
        }
      }
    }
  }
}

// tablet
@media screen and (min-width: $rc-m-min-width) and (max-width: $rc-m-max-width) {
  .personal_details_widget {
    &.container_12 {
      .horizontal.row-fluid {
        .label.span3 {
          width: 43%;
        }

        .span1 {
          width: 5%;
        }

        .value.span8 {
          width: 48%;
        }
      }
    }
  }
}