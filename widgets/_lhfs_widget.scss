// 
// Reason to don't use id selectors instead of class selectors
// http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/
// http://screwlewse.com/2010/07/dont-use-id-selectors-in-css/
// http://oli.jp/2011/ids/

$frame_border_radius: 3px;
.frame {
  position: relative;
  min-width: 220px;
  min-height: 100px;
  padding: 15px;
  border: 2px solid $grey;
  border-radius: $frame_border_radius;
}
@mixin bubble($width: 10px, $border: 2px, $quadrant: 0, $top: "", $right: "", $bottom: "", $left: "", $border-color: white, $background-color: grey) { //creates a bubble nose on a frame
  //$quadrant works like the coordinates in border 0 = top, 1 = left, 2 = bottom, 3 = right
  //offset values right, left, top and bottom indicate the distance from one of the extremes
  //of the quadrant, thus
  //$quadrant: 0 and $right: 20px;
  //means that the bubble nose is on the top and 20px from the right
  //it should be self-evident that nonsensical combinations such as
  //$quadrant: 0 (top) and $bottom: 20px
  //will produce nonsensical results, so quadrant
  //0 or 2 will only work with EITHER left or right
  //and 1 or 3 with EITHER top or bottom
  //if the nose is supposed to be solid, background-color can be set to transparent

  &:before, &:after {
    content: '';
    display: block;
    position: absolute;
    $pos: -2 * $width;
    @if $quadrant == 0 {
      top: $pos;
      border-color: transparent transparent $border-color transparent;
    };
    @if $quadrant == 1 {
      right: $pos;
      border-color: transparent transparent transparent $border-color;
    }
    @if $quadrant == 2 {
      bottom: $pos;
      border-color: $border-color transparent transparent transparent;
    }
    @if $quadrant == 3 {
      left: $pos;
      border-color: transparent $border-color transparent transparent;
    }
    @if $top != "" {top: $top};
    @if $right != "" {right: $right};
    @if $bottom != "" {bottom: $bottom};
    @if $left != "" {left: $left};
    width: 0;
    height: 0;
    border-style: solid;
    border-width: $width;
    border-radius: inherit;
  }
  &:after {
    $pos: (-2 * $width) + $border;
    @if $quadrant == 0 {
      top: $pos;
      border-color: transparent transparent $background-color transparent;
    }
    @if $quadrant == 1 {
      right: $pos;
      border-color: transparent transparent transparent $background-color;
    }
    @if $quadrant == 2 {
      bottom: $pos;
      border-color: $background-color transparent transparent transparent;
    }
    @if $quadrant == 3 {
      left: $pos;
      border-color: transparent $background-color transparent transparent;
    }
  }
}
.bubble {
  @include bubble(10px, 2px, $quadrant: 3, $bottom: 20px, $border-color: $grey, $background-color: $white);
}

.error {
  @include inlineFrame();
  background-color: $light_red;
  div.header {
    .icon {
      font-family: $font_icons;
      color: $red;
    }
    float: left;
    font-family: $font_bold;
    color: $red;
    margin-right: 20px;
  }
}

#lhfs_widget {
  .tip {
    background-color: $sky;
    @include inlineFrame();
    padding-left: 40px;
    .intro {
      &:before {
        font-family: $font_icons;
        content: "O";
        margin-left: -20px; //this is faking it, compensating for the space requirement of :before, display: inline does not seem to work
        margin-right: 5px;
        left: -10px;
        position: relative;
      }
      color: $white;
      font-size: $large;
      font-family: $font_normal;
      margin-bottom: 20px;
    }
  }
  &>ul {
    margin: 30px 0;
    width: 100%;
    li.payment {
      .details {
        display: none;
      }
      .description {
        &:before {
          font-family: $font_icons;
          color: $blue;
          content: "\e604";
          margin-left: -20px; //this is faking it, compensating for the space requirement of :before, display: inline does not seem to work
          left: -10px;
          position: relative;
        }
        padding-left: 40px;
      }
      &.data {
        .details {
          display: block;
        }
        .description {
          display: none;
        }
      }

      div.title, span.police-number {
        font-family: $font_medium;  //font-weight bold does not work for this font family >:(;
      }
    }
  }
}

#lhfs_widget {
  input, select {
    $input_width: 228px;
    $input_margin: 5px;
    display: none;
    margin-top: 0px;
    margin-bottom: 0px;
    width: $input_width;
    &.half {
      width: $input_width / 2 - $input_margin;
      margin-right: $input_margin * 2;
      float: left;
      &:last-child {
        float: none;
      }
    }
    &.quarter {
      width: $input_width / 4 - $input_margin * 2;
      margin-right: $input_margin * 2;
      float: left;
      &:last-child {
        float: none;
      }
    }
  }
  input[type=checkbox], input[type=radio] {
    width: auto;
  }

  li.value {
    span {
      display: inline;
    }
  }
  label.left {
    float:left;
  }

  .edit {
    li.label {
      font-family: $font_normal;
    }
    input, select {
      display: block;
    }
    li.value {
      span {
        display: none;
      }
    }
  }
}

ul.actions {
  text-align: left;
  li {
    float: none;
    display: block;
    &.edit {
      display: none;
    }
  }
  &.edit {
    text-align: right;
    li {
      display: block;
      &.view {
        display: none;
      }
    }
  }
}

ul.horizontal {
  margin: 10px 0 10px 0;
  padding: 1px 0;
  width: 100%;
  display: none; //together with the .data class for li.payment toggles on and off the visibility of the data elements
  &.clear {
    width: 100%;
    height: 1px;
    margin: 0 0 -1px;
    clear: both;
  }
  &.visible {
    display: block;
  }
  li {
    &.label {
      font-family: $font_light;
    }
    &.value {
      font-family: $font_light;
    }
    display: inline-block;
    float: left;
    width: 50%; //default value, can be overwritten by css, of course
    &:last-of-type {
      float: none;
      clear:both; //
    }
  }
}
